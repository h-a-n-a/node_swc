var W=Object.create;var a=Object.defineProperty;var M=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,h=Object.prototype.hasOwnProperty;var l=e=>a(e,"__esModule",{value:!0});var E=(e,t)=>{l(e);for(var o in t)a(e,o,{get:t[o],enumerable:!0})},x=(e,t,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of A(t))!h.call(e,s)&&s!=="default"&&a(e,s,{get:()=>t[s],enumerable:!(o=M(t,s))||o.enumerable});return e},m=e=>x(l(a(e!=null?W(g(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);E(exports,{default:()=>S,wasmLoader:()=>S});var i=m(require("fs")),n=m(require("path"));var d=m(require("fs"));async function u(e){let t=await WebAssembly.compile(await d.default.promises.readFile(e));return{imports:WebAssembly.Module.imports(t),exports:WebAssembly.Module.exports(t)}}var c=JSON.stringify,$=(e,t)=>`import { ${t.join(", ")} } from ${c(e)};`,f=(e,t,o)=>Array.from(e).map(s=>t.apply(o,s));function D(e,t){let o=new Map;for(let s of t){let r=o.get(s.module);r?r.push(s.name):o.set(s.module,[s.name])}return`
        // Import from JS modules
        ${f(o,$).join(`
`)}

        // Build the WASM import object
        const ${e} = {
            ${f(o,(s,r)=>`[${c(s)}]: {
                ${r.join(`,
`)}
            }`).join(`,
`)}
        };`}function R(e,t){return t.map(o=>`export const ${o.name} = ${e}.${o.name};`).join(`
`)}async function w(e){let{imports:t,exports:o}=await u(e);return`
        import wasmModule from ${JSON.stringify(e)};

        ${D("imports",t)}

        async function loadWasm(module, imports) {
            if (typeof module === 'string') {
                const moduleRequest = await fetch(module);
                if (typeof WebAssembly.instantiateStreaming === 'function') {
                    try {
                        return await WebAssembly.instantiateStreaming(moduleRequest, imports);
                    } catch (e) {
                        if (moduleRequest.headers.get('Content-Type') != 'application/wasm') {
                            console.warn(e);
                        } else {
                            throw e;
                        }
                    }
                }
                module = await moduleRequest.arrayBuffer();
            }
            return await WebAssembly.instantiate(module, imports);
        }

        export const { instance, module } = await loadWasm(wasmModule, imports);

        ${R("instance.exports",o)}
    `}var p="wasm-module",b="wasm-deferred",y="wasm-embedded";function S(e){var o;let t=((o=e==null?void 0:e.mode)==null?void 0:o.toLowerCase())=="embedded";return{name:"wasm",setup(s){s.onResolve({filter:/\.(?:wasm)$/},r=>{if(r.namespace===p)return{path:r.path,namespace:t?y:b};if(r.resolveDir!=="")return{path:n.default.isAbsolute(r.path)?r.path:n.default.join(r.resolveDir,r.path),namespace:p}}),s.onLoad({filter:/.*/,namespace:p},async r=>({contents:await w(r.path),resolveDir:n.default.dirname(r.path)})),s.onLoad({filter:/.*/,namespace:b},async r=>({contents:await i.default.promises.readFile(r.path),loader:"file"})),s.onLoad({filter:/.*/,namespace:y},async r=>({contents:await i.default.promises.readFile(r.path),loader:"binary"}))}}}0&&(module.exports={wasmLoader});
